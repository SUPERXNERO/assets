class TailwindGroup{constructor(e="text/tailwindcss-groups"){this.scriptType=e,this.rules=new Map,this.observer=null,this.observerScope="deep"}init(){this.findAndParseGroups(),this.applyClasses(document.documentElement,"deep")}findAndParseGroups(){const e=document.querySelectorAll(`script[type="${this.scriptType}"]`);e.forEach((e=>{const t=e.innerHTML;let s;for(;null!==(s=/([^{]+)\s*\{\s*@apply\s+([^}]+);?\s*}/g.exec(t));){const e=s[1].trim(),t=s[2].trim().split(/\s+/).filter(Boolean);if(e&&t.length>0){if(this.rules.has(e)){const s=this.rules.get(e);this.rules.set(e,[...new Set([...s,...t])])}else this.rules.set(e,t)}}))}applyClasses(e,t="deep"){this.rules.forEach(((s,n)=>{try{e.matches&&e.matches(n)&&e.classList.add(...s),"deep"===t&&e.querySelectorAll(n).forEach((e=>{e.classList.add(...s)}))}catch(e){console.error(`TailwindGroup: Invalid selector "${n}".`,e)}}))}reapplyAll(){this.applyClasses(document.documentElement,"deep")}reapplyFor(e,t={scope:"deep"}){if(!e||!(e instanceof HTMLElement))return void console.error('TailwindGroup: "reapplyFor" requires a valid HTML element.');const s=t.scope||"deep";this.applyClasses(e,s)}observe(e=document.body,t={scope:"deep"}){this.observerScope=t.scope||"deep";const s={childList:!0,subtree:!0},n=(e,t)=>{for(const s of e)if("childList"===s.type)for(const e of s.addedNodes)1===e.nodeType&&this.applyClasses(e,this.observerScope)};this.observer=new MutationObserver(n),this.observer.observe(e,s),console.log(`TailwindGroup: Observing with scope: "${this.observerScope}" in`,e)}disconnect(){this.observer&&(this.observer.disconnect(),console.log("TailwindGroup: Observer disconnected."))}}